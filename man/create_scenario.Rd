% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scenario.R
\name{create_scenario}
\alias{create_scenario}
\alias{set_active_scenario}
\alias{get_active_scenario}
\title{Create, set, and get scenario.}
\usage{
create_scenario(name, active = TRUE, .basedir = here::here())

set_active_scenario(name, .basedir = here::here())

get_active_scenario()
}
\arguments{
\item{name}{:: \code{character(1)}\cr
Name of the scenario}

\item{active}{:: \verb{logical(1)\\cr Default as }TRUE`. Set the newly created scenario as active scenario.}

\item{.basedir}{:: \code{character(1)}\cr
The base directory that the downloaded module will be saved at. \code{\link[here:here]{here::here()}} is
used to provide the default value which is is the root folder of the active RStudio project.}
}
\value{
\code{create_} and \code{set_} invisibly returns the scenario path and \code{get_} returns a named list.
}
\description{
A scenario folder is where you organise and store the scripts, the data and
the models that associate with a microsimulation model implementation. This
is a recommended practice for dymium models.

\code{create_scenario}: creates a scenario folder inside the \code{scenarios} folder, which
will be created if not already exists, at the root folder of your active RStudio
project. The standard structure of a scenario folder contains an 'inputs' folder,
an 'outputs' folder inside. However, if the scenario is already existed then it
this will set that scenario to \code{active} if \code{active} is \code{TRUE}. When you call a
dymium function such as \code{dm_save}, it will automatically save the data to the
\code{outputs} folder of the currently active scenario.

\code{set_active_scenario}: is useful for event functions to access the current
active scenario directory. If the scenerio folder doesn't have 'inputs' and
'ouputs' folders then they will be created.

\code{get_active_scenario}: returns a list of 3 elements: 'scenario, 'inputs' and
'outputs' directories.
}
\examples{
\dontrun{
create_scenario(name = "test", active = FALSE)
set_active_scenario(name = "test")
get_active_scenario()
}
}
