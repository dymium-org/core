% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Model.R
\name{Model}
\alias{Model}
\alias{Models}
\alias{summary.Model}
\title{Model class}
\format{\link[R6:R6Class]{R6::R6Class} object inheriting \link{Generic}.}
\usage{
\method{summary}{Model}(object, ...)
}
\arguments{
\item{object}{a \link{Model} object}

\item{...}{dots}
}
\description{
A container for the supported model objects (see \link{SupportedTransitionModels}).
When a model object is stored inside Model it can be assess using reference semantics.
This is particularly useful when you want to store model objects inside \link{World}.
By doing so, you can assess those models from \link{World} as it is flowing down a
microsimulation pipeline just like \link{Entities}.
}
\section{Construction}{
\preformatted{x <- Model$new(x)
}
\itemize{
\item \code{x} :: (\link[caret:train]{caret::train} | \link[data.table:data.table]{data.table::data.table} | named \code{list})\cr
A model object that compatible.
}
}

\section{Active field (read-only)}{

\itemize{
\item \code{model}\cr
The stored model object in its original form.
}
}

\section{Public fields}{

\itemize{
\item \code{preprocessing_fn}\cr
Default as NULL, this is to store a preprocessing function which will be
used to evaluate the entity data in \link{Transition} prior to simulating the
transition. A situation where this is useful could be when you want to limit
the use of a \link{Model} object to the specific group of agents (e.g: age between
\code{x} and \code{y}) that was used to estimate the model.
}
}

\section{Public Methods}{

\itemize{
\item \code{get()}\cr
() -> (\link[caret:train]{caret::train} | \link[data.table:data.table]{data.table::data.table} | named \code{list})\cr
Get a model object.
\item \code{set(x)}\cr
(\link[caret:train]{caret::train} | \link[data.table:data.table]{data.table::data.table} | named \code{list})\cr
Get a model object.
\item \code{modify()}\cr
An abstract method.
\item \code{simulate()}\cr
An abstract method.
\item \code{print()}\cr
}
}

\examples{

simple_prob_model <- Model$new(x = list(yes = 0.95, no = 0.05))

simple_glm_model <- Model$new(x = stats::glm(factor(sex) ~ age, data = toy_individuals, family = "binomial"))

# return the original model object
simple_prob_model$model

# add to world
world <- World$new()

world$add(simple_prob_model, name = "simple_prob_model")
world$add(simple_glm_model, name = "simple_glm_model")

# to access
world$get("simple_prob_model")
world$get("simple_glm_model")

# or alternatively you can use `get_model` which makes sure that it only looks
# through the named list of stored Model objects inside [World].
world$get_model("simple_prob_model")
world$get_model("simple_glm_model")

}
