% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Container.R
\name{Container}
\alias{Container}
\title{Container}
\format{\link[R6:R6Class]{R6::R6Class} object inheriting from \link[dymiumCore:ContainerGeneric]{dymiumCore::ContainerGeneric}}
\description{
Container is the base class for \link{World} and \link{Population}. It has the basic
functionalities to store and access references of other \link[R6:R6Class]{R6::R6Class} objects.
}
\section{Construction}{
\preformatted{x <- Container$new()
}
\itemize{
\item NULL\cr
}
}

\section{Public Fields}{

\itemize{
\item \code{Cont}\cr
A named list that contains references of other \link[R6:R6Class]{R6::R6Class} objects.
}
}

\section{Public Methods}{

\itemize{
\item \code{add(x, name)}\cr
(\link[R6:R6Class]{R6::R6Class}|Supported Transition Models)\cr
Add an \link[R6:R6Class]{R6::R6Class} object or a object of the classes in \link[dymiumCore:SupportedTransitionModels]{dymiumCore::SupportedTransitionModels} to self$Cont.
Name must be given when \code{x} is an object of the classes in \link[dymiumCore:SupportedTransitionModels]{dymiumCore::SupportedTransitionModels}.
\item \code{check_pos(x)}\cr
(\code{integer(1)}) -> (\code{logical(1)})\cr
Check if the position in \code{x} exists in \code{self$Cont}.
\item \code{get(x)}\cr
(\code{character(1)} | \code{integer(1)} | an \link[R6:R6Class]{R6::R6Class} generator) -> (an \link[R6:R6Class]{R6::R6Class} object)\cr
Get a reference to \code{x} which can be a \link[R6:R6Class]{R6::R6Class} generator or string or integer.
\item \code{n()}\cr
() -> (\code{integer(1)})\cr
Returns the length of the references in \code{self$Cont}.
\item \code{names()}\cr
() -> (\code{character()})\cr
Returns the names of the references in \code{self$Cont}.
\item \code{print()}\cr
\item \code{remove(x)}\cr
(\code{character(1)} | \code{integer(1)} | a \link[R6:R6Class]{R6::R6Class} generator)\cr
Remove the reference of x from self$Cont by the class of the given \link[R6:R6Class]{R6::R6Class}
generator or string or integer.
\item \code{unpack(target)}\cr
(\link[dymiumCore:Container]{dymiumCore::Container})\cr
Add all the references inside self$Cont to the \code{target} container. This is
useful when you have containers within a container so that all references can
be access via the top container. eg: A World container that contains a Population
container can directly access Individual and Household objects.
\item \code{summary()}\cr
Abstract method.
}
}

\section{Super classes}{
\code{\link[dymiumCore:Generic]{dymiumCore::Generic}} -> \code{\link[dymiumCore:ContainerGeneric]{dymiumCore::ContainerGeneric}} -> \code{Container}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-add}{\code{Container$add()}}
\item \href{#method-get}{\code{Container$get()}}
\item \href{#method-names}{\code{Container$names()}}
\item \href{#method-remove}{\code{Container$remove()}}
\item \href{#method-clone}{\code{Container$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="class">}\href{../../dymiumCore/html/Generic.html#method-class}{\code{dymiumCore::Generic$class()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="debug">}\href{../../dymiumCore/html/Generic.html#method-debug}{\code{dymiumCore::Generic$debug()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="is_dymium_class">}\href{../../dymiumCore/html/Generic.html#method-is_dymium_class}{\code{dymiumCore::Generic$is_dymium_class()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="message">}\href{../../dymiumCore/html/Generic.html#method-message}{\code{dymiumCore::Generic$message()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_debug">}\href{../../dymiumCore/html/Generic.html#method-msg_debug}{\code{dymiumCore::Generic$msg_debug()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_info">}\href{../../dymiumCore/html/Generic.html#method-msg_info}{\code{dymiumCore::Generic$msg_info()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_trace">}\href{../../dymiumCore/html/Generic.html#method-msg_trace}{\code{dymiumCore::Generic$msg_trace()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_warn">}\href{../../dymiumCore/html/Generic.html#method-msg_warn}{\code{dymiumCore::Generic$msg_warn()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="ContainerGeneric" data-id="check_pos">}\href{../../dymiumCore/html/ContainerGeneric.html#method-check_pos}{\code{dymiumCore::ContainerGeneric$check_pos()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="ContainerGeneric" data-id="initialize">}\href{../../dymiumCore/html/ContainerGeneric.html#method-initialize}{\code{dymiumCore::ContainerGeneric$initialize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="ContainerGeneric" data-id="n">}\href{../../dymiumCore/html/ContainerGeneric.html#method-n}{\code{dymiumCore::ContainerGeneric$n()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="ContainerGeneric" data-id="print">}\href{../../dymiumCore/html/ContainerGeneric.html#method-print}{\code{dymiumCore::ContainerGeneric$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="ContainerGeneric" data-id="summary">}\href{../../dymiumCore/html/ContainerGeneric.html#method-summary}{\code{dymiumCore::ContainerGeneric$summary()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="ContainerGeneric" data-id="unpack">}\href{../../dymiumCore/html/ContainerGeneric.html#method-unpack}{\code{dymiumCore::ContainerGeneric$unpack()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add"></a>}}
\subsection{Method \code{add()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$add(x, name)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get"></a>}}
\subsection{Method \code{get()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$get(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-names"></a>}}
\subsection{Method \code{names()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$names()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove"></a>}}
\subsection{Method \code{remove()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$remove(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Container$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
