% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/History.R
\name{History}
\alias{History}
\title{History class}
\description{
Create History class, record life-course changes of agents.
}
\section{Public methods}{

\code{add(id, time, event)} -
add changes (\code{event}) of agents (\code{id}) with a timestamp (\code{time})

\code{count(ids = NULL, event = NULL)} -
Returns the number of occurence (N) of events for each id.

\code{inspect(ids)} -
Return lifecourse history of the agents in ids by time.

\code{impute(data, id_col, event = NULL)} -
Return the original data imputed with the number of occurence
of the event specified in \code{event} arg. \code{id_col} is used to
merge the output of \code{self$count()} with data.

\code{debug()} -
Makes debugging the object easier by assigning self and
private to the global environment of the current seesion.

\code{get_data(copy = TRUE)} -
return a copy of \code{private$data}. Since \code{private$data} is
a data.table object, if \code{copy} is set to FALSE a reference
to \code{private$data} will be returned.

\code{message()} -
Print \code{message} onto the console with the object name
append in front of the message.
}

\section{Private methods}{

\code{init_data()} -
Initialise data in the correct structure.

\code{data_template()} -
Create a data template which mimics the structure and
column types of private$data.

\strong{NOTE}: event_as_list can take up a lot of memory since
all event entries will be converted to lists.
}

\examples{
h <- History$new()
h$add(
  id = sample(1L:10L, 20, replace = TRUE),
  time = sample(1L:4L, 20, replace = TRUE),
  event = sample(c("Birth", "LeaveHome", "Marriage"), 20, replace = TRUE))
}
\section{Super class}{
\code{\link[dymiumCore:Generic]{dymiumCore::Generic}} -> \code{History}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{History$new()}}
\item \href{#method-add}{\code{History$add()}}
\item \href{#method-count}{\code{History$count()}}
\item \href{#method-inspect}{\code{History$inspect()}}
\item \href{#method-impute}{\code{History$impute()}}
\item \href{#method-debug}{\code{History$debug()}}
\item \href{#method-get_data}{\code{History$get_data()}}
\item \href{#method-message}{\code{History$message()}}
\item \href{#method-clone}{\code{History$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="class">}\href{../../dymiumCore/html/Generic.html#method-class}{\code{dymiumCore::Generic$class()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="is_dymium_class">}\href{../../dymiumCore/html/Generic.html#method-is_dymium_class}{\code{dymiumCore::Generic$is_dymium_class()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_debug">}\href{../../dymiumCore/html/Generic.html#method-msg_debug}{\code{dymiumCore::Generic$msg_debug()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_info">}\href{../../dymiumCore/html/Generic.html#method-msg_info}{\code{dymiumCore::Generic$msg_info()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_trace">}\href{../../dymiumCore/html/Generic.html#method-msg_trace}{\code{dymiumCore::Generic$msg_trace()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_warn">}\href{../../dymiumCore/html/Generic.html#method-msg_warn}{\code{dymiumCore::Generic$msg_warn()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{History$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add"></a>}}
\subsection{Method \code{add()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{History$add(id, event, time = .get_sim_time())}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-count"></a>}}
\subsection{Method \code{count()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{History$count(ids = NULL, event = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inspect"></a>}}
\subsection{Method \code{inspect()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{History$inspect(ids = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-impute"></a>}}
\subsection{Method \code{impute()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{History$impute(data, id_col, event = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-debug"></a>}}
\subsection{Method \code{debug()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{History$debug(pos = 1)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_data"></a>}}
\subsection{Method \code{get_data()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{History$get_data(copy = TRUE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-message"></a>}}
\subsection{Method \code{message()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{History$message(x, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{History$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
