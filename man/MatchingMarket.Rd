% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MatchingMarket.R
\name{MatchingMarket}
\alias{MatchingMarket}
\title{Matching Market Class}
\format{\link[R6:R6Class]{R6::R6Class} object.}
\description{
This is a the abstract base class for matching market objects like
\link{MatchingMarketStochastic} and \link{MatchingMarketOptimal}. This class is usually
used for solving problems such as allocation, matching and mating of agents.
}
\details{
sub-matching problems only contains agentsets' data in a named list format
(agentset_A, agentset_B).
}
\section{Construction}{
\preformatted{matching_problem <- MatchingMarket$new(agentset_A, agentset_B, slots_B, id_col_A, id_col_B, grouping_vars)
}
\itemize{
\item \code{agentset_A} :: \code{\link[data.table:data.table]{data.table::data.table()}}\cr
A data.table contains agentset A data and relavant attributes. This is usually
the choosers (in one-sided matching).
\item \code{agentset_B} :: \code{\link[data.table:data.table]{data.table::data.table()}}\cr
A data.table contains agentset B data and relavant attributes. This is usually
be the agents in the candidate pool.
\item \code{id_col_A} :: \code{character(1)}\cr
A character that indicates the id column of \code{agentset_A}.
\item \code{id_col_B} :: \code{character(1)}\cr
A character that indicates the id column of \code{agentset_B}.
\item \code{slots_B} :: \code{integer()}\cr
(\code{NULL})\cr
A integer vector of length 1 or length equals to the number of rows in \code{agentset_B}.
This is needed in \code{many-to-one} matching. Such as workers to jobs.
\item \code{grouping_vars} :: \code{character()}\cr
(\code{NULL})\cr
When this is provided matching can be done just between agents of the same group.
}
}

\section{Fields}{

\itemize{
\item \code{matching_problem}\cr
}
}

\section{Methods}{

\itemize{
\item \code{split_market()}\cr
(\code{logical(1)}) -> \verb{()}\cr
Create a list of list of data.tables. \verb{list(\{group_name\} = list(\{sub_market_number\} = list(agentset_A = data.table(), agentset_B = data.table())))}.
\item \code{split_by_group(matching_problem = self$matching_problem, grouping_vars = self$matching_problem$grouping_vars)}\cr
(\verb{agentset_A = data.table::data.table(), agentset_B = data.table::data.table()}|\code{logical()}, \code{character()}, \code{logical(1)}) -> \verb{[data.table::data.table()]}\cr
Create n-groups sub-matching problems.
\item \code{split_by_n(matching_problem = self$matching_problem, n = NULL)}\cr
(\verb{agentset_A = data.table::data.table(), agentset_B = data.table::data.table()}| \code{integer()}) -> \verb{list([data.table::data.table()])}
Create n sub-matching problems. If n is not given, then n will be determine
based on self$max_market_size.
\item \code{matching_score_A(matching_problem = self$matching_problem, idx_A, idx_B)}\cr
(\code{list(agentset_A = data.table::data.table(), agentset_B = data.table::data.table())}|\code{integer()}|\code{integer()} ) ->
\code{integer()} of length \code{idx_B} or \code{matrix()} of length \code{idx_A} * length \code{idx_B}\cr
This is an abstract function meaning it needs to be implemented. Please see
the detail section for suggestion how this method should be implemented.
\item \code{matching_score_B(matching_problem = self$matching_problem, idx_B, idx_A)}\cr
(\verb{list(agentset_A = data.table::data.table(), agentset_B = [data.table::data.table()])} |\code{integer()}|\code{integer()} ) ->
\code{integer()} of length \code{idx_B} or \code{matrix()} of length \code{idx_A} * length \code{idx_B}\cr
This is an abstract function meaning it needs to be implemented. Please see
the detail section for suggestion how this method should be implemented.
}
}

