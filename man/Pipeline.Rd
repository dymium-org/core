% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Pipeline.R
\name{Pipeline}
\alias{Pipeline}
\title{Pipeline class}
\format{
\link[R6:R6Class]{R6::R6Class} object inheriting from \link[dymiumCore:Generic]{dymiumCore::Generic}.
}
\description{
Pipeline is a warper of event functions. It can shuffle the order in which
the warped event functions get executed or even repeatedly run the event functions.
}
\section{Construction}{
\preformatted{Pipeline$new(x)
}
\itemize{
\item x\cr
Event functions in a \%>\% structure where the start of the pipe must be
\code{.}. See the example.
}
}

\section{Public Fields}{

\itemize{
\item \code{Entities}\cr
Contains the instances of Entity and its inheritences those were added by
\code{self$add_entity()}.
\item \code{config}\cr
Contains the config file that was used to create the instance, if there is any.
\item \code{Models}\cr
Contains model objects.
\item \code{info}\cr
Contains information about the World object such as dymium's version it was
created with, its built date, creator info, R version, etc.
}
}

\section{Public Methods}{

\itemize{
\item \code{set(x)}\cr
\item \code{get()}\cr
\item \code{run(x, shuffle, n_loops)}\cr
(\link{Container}, \code{logical(1)}, \code{integer(1)}) -> \link{Container}\cr
\item \code{print()}\cr
}
}

\examples{

# create Population
Pop <- Population$new(toy_individuals, toy_households, pid_col = "pid", hid_col = "hid")

# create 3 dummy events
event1 <- function(object) {
  # do something
  return(object)
}

event2 <- function(object) {
  # do something
  return(object)
}

event3 <- function(object) {
  # do something
  return(object)
}

# construct the sequence of the dummy events
# pipeline <- Pipeline$new(. \%>\% event1 \%>\% event2 \%>\% event3)
# pipeline$get()

# run events in a random order
# pipeline$run(x = Pop, shuffle = TRUE)
}
