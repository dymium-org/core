% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Pipeline.R
\name{Pipeline}
\alias{Pipeline}
\title{Pipeline class}
\format{\link[R6:R6Class]{R6::R6Class} object inheriting from \link[dymiumCore:Generic]{dymiumCore::Generic}.}
\description{
Pipeline is a warper of event functions. It can shuffle the order in which
the warped event functions get executed or even repeatedly run the event functions.
}
\section{Construction}{
\preformatted{Pipeline$new(x)
}
\itemize{
\item x\cr
Event functions in a \%>\% structure where the start of the pipe must be
\code{.}. See the example.
}
}

\section{Public Fields}{

\itemize{
\item \code{Entities}\cr
Contains the instances of Entity and its inheritences those were added by
\code{self$add_entity()}.
\item \code{config}\cr
Contains the config file that was used to create the instance, if there is any.
\item \code{Models}\cr
Contains model objects.
\item \code{info}\cr
Contains information about the World object such as dymium's version it was
created with, its built date, creator info, R version, etc.
}
}

\section{Public Methods}{

\itemize{
\item \code{set(x)}\cr
\item \code{get()}\cr
\item \code{run(x, shuffle, n_loops)}\cr
(\link{Container}, \code{logical(1)}, \code{integer(1)}) -> \link{Container}\cr
\item \code{print()}\cr
}
}

\examples{

Pop <- Population$new()

# load toy data into Population
Pop$initialise_data(toy_individuals, toy_households)

# create 3 dummy events
event1 <- function(object) {
  # do something
  return(object)
}

event2 <- function(object) {
  # do something
  return(object)
}

event3 <- function(object) {
  # do something
  return(object)
}

# construct the sequence of the dummy events
# pipeline <- Pipeline$new(. \%>\% event1 \%>\% event2 \%>\% event3)
# pipeline$get()

# run events in a random order
# pipeline$run(x = Pop, shuffle = TRUE)
}
\section{Super class}{
\code{\link[dymiumCore:Generic]{dymiumCore::Generic}} -> \code{Pipeline}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Pipeline$new()}}
\item \href{#method-set}{\code{Pipeline$set()}}
\item \href{#method-print}{\code{Pipeline$print()}}
\item \href{#method-get}{\code{Pipeline$get()}}
\item \href{#method-run}{\code{Pipeline$run()}}
\item \href{#method-clone}{\code{Pipeline$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="class">}\href{../../dymiumCore/html/Generic.html#method-class}{\code{dymiumCore::Generic$class()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="debug">}\href{../../dymiumCore/html/Generic.html#method-debug}{\code{dymiumCore::Generic$debug()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="is_dymium_class">}\href{../../dymiumCore/html/Generic.html#method-is_dymium_class}{\code{dymiumCore::Generic$is_dymium_class()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="message">}\href{../../dymiumCore/html/Generic.html#method-message}{\code{dymiumCore::Generic$message()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_debug">}\href{../../dymiumCore/html/Generic.html#method-msg_debug}{\code{dymiumCore::Generic$msg_debug()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_info">}\href{../../dymiumCore/html/Generic.html#method-msg_info}{\code{dymiumCore::Generic$msg_info()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_trace">}\href{../../dymiumCore/html/Generic.html#method-msg_trace}{\code{dymiumCore::Generic$msg_trace()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_warn">}\href{../../dymiumCore/html/Generic.html#method-msg_warn}{\code{dymiumCore::Generic$msg_warn()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$new(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set"></a>}}
\subsection{Method \code{set()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$set(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get"></a>}}
\subsection{Method \code{get()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$get()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run"></a>}}
\subsection{Method \code{run()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$run(x, shuffle = FALSE, n_loops = 1)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pipeline$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
