% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Population.R
\name{Population}
\alias{Population}
\title{Population}
\format{\link[R6:R6Class]{R6::R6Class} object inheriting from \link[dymiumCore:Container]{dymiumCore::Container}.}
\description{
Population contains an instance of \link{Individual} and \link{Household} and methods
that modify both if its contained objects simutaneously.
}
\section{Construction}{
\preformatted{Pop <- Population$new()
}
\itemize{
\item ind_data::\link[data.table:data.table]{data.table::data.table}\cr
Microdata of Individuals/Persons.
\item hh_data::\link[data.table:data.table]{data.table::data.table}\cr
Microdata of Households.
\item pid_col::\code{character(1)}\cr
Individual/Person id column in \code{ind_data}.
\item hid_col::\code{character(1)}\cr
Hoysehold id column in \code{hh_data}
}
}

\section{Public Fields}{

\itemize{
\item \code{ind}:: \code{NULL} | an \link[R6:R6Class]{R6::R6Class} object\cr
Shorthand to the \link{Individual} object.
\item \code{hh}:: \code{NULL} | an \link[R6:R6Class]{R6::R6Class} object\cr
Shorthand to the \link{Household} object.
}
}

\section{Public Methods}{

\itemize{
\item \code{initialise_data(ind_data, hh_data, pid_col, hid_col)}\cr
Load the microdata of individuals and households to construct \link{Individual} and
\link{Household} objects.
\item \code{add_population(ind_data, hh_data)}\cr
(\code{\link[data.table:data.table]{data.table::data.table()}}, \code{\link[data.table:data.table]{data.table::data.table()}})\cr
add a new population. This requires that all individuals \code{ind_data} belong
to valid households. In the case, that \code{hh_data} is not provided, household ids of
\code{ind_data} will be checked against household ids of the existing households inside
the Population object being added to. One may use \code{pop_register()} to replace
the id columns of the new population with ids that don't exist in the Population object.
\item \code{join_household(ind_ids, hh_ids)}\cr
(\code{integer()}, \code{integer()})\cr
Individuals join their new households and the households' affected attributes,
from the joining of new members, will also be updated. Note! All individuals
must not be in any household prior to joining a new one. Individual's
existing household can be removed using \code{leave_household}.
\item \code{leave_household(ind_ids)}\cr
(\code{integer()})\cr
Remove the individuals' household ids in ind_ids and update the households'
affected attributes, from members leaving the household.
\item \code{remove_emptied_households()}\cr
Remove emptied households.
\item \code{remove_population(pid = NULL, hid = NULL)}\cr
(\code{integer()}, \code{integer()})\cr
Remove population from \verb{$ind} and \verb{$hh} of this \code{Pop} object. If only \code{hid}
is given all household members of households in \code{hid} arg will be removed.
To remove only individuals leave \code{hid} to NULL and specify individuals by their ids
in \code{pid}.
\item \code{inspect(ind_ids = NULL, see_hh = FALSE)}\cr
(\code{integer()}, \code{logical(1)})\cr
Print to console data of individuals and their households.
\item \code{inspect_members(hhid = NULL)}\cr
(\code{integer()}) -> \code{\link[data.table:data.table]{data.table::data.table()}}\cr
Returns Individual$data of all members in \code{hhid}.
\item \code{count_all(verbose = TRUE)}\cr
Print out the number of individuals and households to console.
\item \code{get_hhsize(hids)}\cr
(\code{integer()})\cr
Get hhsize from individual's data and merge it to household data.
\item \code{update_hhsize()}\cr
Update household size.
\item \code{update()}\cr
mask all the household update functions that need to be adjust after changes
in household members or in their attributes; such as change in partnership status,
change of income, birth.
\item \verb{keep_log(var, value, time = .get_sim_time()}\cr
(\code{character(1)},\code{list}|\code{integer(1)}|\code{character(1)}|\code{logical(1)}, \code{integer(1)})\cr
Keep log of events. \code{var} usually uses one of these prefixes "all", "occ", "count" or "id".
\item \code{get_log(type = "all")}\cr
(c("all", "occ", "count", "id")) -> \code{\link[data.table:data.table]{data.table::data.table()}}\cr
Get the event log stored by \code{keep_log}.
\item \code{check_unique_id_cols(ind_data, hh_data = NULL)}\cr
(\code{\link[data.table:data.table]{data.table::data.table()}}, \code{\link[data.table:data.table]{data.table::data.table()}}) -> \code{logical(1)}\cr
Check that all id cols of the input data are unique from the existing ids in
their respective objects.
}
}

\examples{

## ------------------------------------------------
## Method `Population$new`
## ------------------------------------------------


Pop <- Population$new()
}
\section{Super classes}{
\code{\link[dymiumCore:Generic]{dymiumCore::Generic}} -> \code{\link[dymiumCore:ContainerGeneric]{dymiumCore::ContainerGeneric}} -> \code{\link[dymiumCore:Container]{dymiumCore::Container}} -> \code{Population}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{ind}}{the reference to the \link{Individual} object created by Population}

\item{\code{hh}}{the reference to the \link{Household} object created by Population}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Population$new()}}
\item \href{#method-initialise_data}{\code{Population$initialise_data()}}
\item \href{#method-add_population}{\code{Population$add_population()}}
\item \href{#method-join_household}{\code{Population$join_household()}}
\item \href{#method-leave_household}{\code{Population$leave_household()}}
\item \href{#method-remove_emptied_households}{\code{Population$remove_emptied_households()}}
\item \href{#method-remove_population}{\code{Population$remove_population()}}
\item \href{#method-inspect}{\code{Population$inspect()}}
\item \href{#method-inspect_members}{\code{Population$inspect_members()}}
\item \href{#method-count_all}{\code{Population$count_all()}}
\item \href{#method-check_hhsize}{\code{Population$check_hhsize()}}
\item \href{#method-check_unique_id_cols}{\code{Population$check_unique_id_cols()}}
\item \href{#method-get_hhsize}{\code{Population$get_hhsize()}}
\item \href{#method-get_sum_hhsize}{\code{Population$get_sum_hhsize()}}
\item \href{#method-update_hhsize}{\code{Population$update_hhsize()}}
\item \href{#method-update}{\code{Population$update()}}
\item \href{#method-get_log}{\code{Population$get_log()}}
\item \href{#method-keep_log}{\code{Population$keep_log()}}
\item \href{#method-clone}{\code{Population$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="class">}\href{../../dymiumCore/html/Generic.html#method-class}{\code{dymiumCore::Generic$class()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="debug">}\href{../../dymiumCore/html/Generic.html#method-debug}{\code{dymiumCore::Generic$debug()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="is_dymium_class">}\href{../../dymiumCore/html/Generic.html#method-is_dymium_class}{\code{dymiumCore::Generic$is_dymium_class()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="message">}\href{../../dymiumCore/html/Generic.html#method-message}{\code{dymiumCore::Generic$message()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_debug">}\href{../../dymiumCore/html/Generic.html#method-msg_debug}{\code{dymiumCore::Generic$msg_debug()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_info">}\href{../../dymiumCore/html/Generic.html#method-msg_info}{\code{dymiumCore::Generic$msg_info()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_trace">}\href{../../dymiumCore/html/Generic.html#method-msg_trace}{\code{dymiumCore::Generic$msg_trace()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Generic" data-id="msg_warn">}\href{../../dymiumCore/html/Generic.html#method-msg_warn}{\code{dymiumCore::Generic$msg_warn()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="ContainerGeneric" data-id="check_pos">}\href{../../dymiumCore/html/ContainerGeneric.html#method-check_pos}{\code{dymiumCore::ContainerGeneric$check_pos()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="ContainerGeneric" data-id="n">}\href{../../dymiumCore/html/ContainerGeneric.html#method-n}{\code{dymiumCore::ContainerGeneric$n()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="ContainerGeneric" data-id="print">}\href{../../dymiumCore/html/ContainerGeneric.html#method-print}{\code{dymiumCore::ContainerGeneric$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="ContainerGeneric" data-id="summary">}\href{../../dymiumCore/html/ContainerGeneric.html#method-summary}{\code{dymiumCore::ContainerGeneric$summary()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="ContainerGeneric" data-id="unpack">}\href{../../dymiumCore/html/ContainerGeneric.html#method-unpack}{\code{dymiumCore::ContainerGeneric$unpack()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Container" data-id="add">}\href{../../dymiumCore/html/Container.html#method-add}{\code{dymiumCore::Container$add()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Container" data-id="get">}\href{../../dymiumCore/html/Container.html#method-get}{\code{dymiumCore::Container$get()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Container" data-id="names">}\href{../../dymiumCore/html/Container.html#method-names}{\code{dymiumCore::Container$names()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="dymiumCore" data-topic="Container" data-id="remove">}\href{../../dymiumCore/html/Container.html#method-remove}{\code{dymiumCore::Container$remove()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Create a \link{Population} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$new(ind_data, hh_data, pid_col = NULL, hid_col = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ind_data}}{(\link[data.table:data.table]{data.table::data.table}) Microdata of Individuals/Persons.}

\item{\code{hh_data}}{(\link[data.table:data.table]{data.table::data.table}) Microdata of Households.}

\item{\code{pid_col}}{(\code{character(1)}) Individual/Person id column in \code{ind_data}.}

\item{\code{hid_col}}{(\code{character(1)}) Household id column in \code{hh_data}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An \link[R6:R6Class]{R6::R6Class} object of the \link{Population} class.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
Pop <- Population$new()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-initialise_data"></a>}}
\subsection{Method \code{initialise_data()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$initialise_data(ind_data, hh_data, pid_col = NULL, hid_col = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_population"></a>}}
\subsection{Method \code{add_population()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$add_population(ind_data, hh_data)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-join_household"></a>}}
\subsection{Method \code{join_household()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$join_household(ind_ids, hh_ids)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-leave_household"></a>}}
\subsection{Method \code{leave_household()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$leave_household(ind_ids)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove_emptied_households"></a>}}
\subsection{Method \code{remove_emptied_households()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$remove_emptied_households()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove_population"></a>}}
\subsection{Method \code{remove_population()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$remove_population(pid = NULL, hid = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inspect"></a>}}
\subsection{Method \code{inspect()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$inspect(ind_ids = NULL, see_hh = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inspect_members"></a>}}
\subsection{Method \code{inspect_members()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$inspect_members(hhid)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-count_all"></a>}}
\subsection{Method \code{count_all()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$count_all(verbose = TRUE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-check_hhsize"></a>}}
\subsection{Method \code{check_hhsize()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$check_hhsize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-check_unique_id_cols"></a>}}
\subsection{Method \code{check_unique_id_cols()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$check_unique_id_cols(ind_data, hh_data)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_hhsize"></a>}}
\subsection{Method \code{get_hhsize()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$get_hhsize(hids)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_sum_hhsize"></a>}}
\subsection{Method \code{get_sum_hhsize()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$get_sum_hhsize(hids)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_hhsize"></a>}}
\subsection{Method \code{update_hhsize()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$update_hhsize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\subsection{Method \code{update()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$update()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_log"></a>}}
\subsection{Method \code{get_log()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$get_log(type = "all")}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-keep_log"></a>}}
\subsection{Method \code{keep_log()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$keep_log(var, value, time = .get_sim_time())}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Population$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
