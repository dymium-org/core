% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Transition.R
\name{Trans}
\alias{Trans}
\title{Transition class}
\description{
A class that perform Monte Carlo simulation on agents using a probabilistic model.
Work flow: \code{initialise()} -> \code{filter()} -> \code{mutate()} -> \code{simulate()} -> \code{postprocess()}.
Note that, to swap the run order of \code{filter()} and \code{mutate()} you need to change the
\code{mutate_first} public field to \code{TRUE}.
}
\note{
\code{target} can be static or dynamic depending on the data structure of it. A static
target can be a named list or an integer value depending its usage in each
event function.
}
\section{Construction}{
\preformatted{Trans$new(x, model, target = NULL, targeted_agents = NULL)
}
\itemize{
\item \code{x} :: \code{\link{R6}}\cr
A Agent class inheritance object.
\item \code{model} :: \code{object}\cr
A model
\item \code{target} :: \code{\link[=integer]{integer()}}\cr
(Default as NULL). A number that forces the number of micro events to occur. For example, if
`10`` is speficied, there will be 10 agents that under go the event. However,
if a integer vector is given it must be the same length as the classes in the model.
This only works for classification models.
\item \code{targeted_agent} :: \code{\link[=integer]{integer()}}\cr
(Default as NULL) A integer vectors that contains ids of agents in \code{x} to undergo the event.
}
}

\section{Fields}{

\itemize{
\item \code{mutate_first}:: \code{logical(1)}\cr
Default as FALSE, this flag is used to indicate whether the attribute data from
the Agent in \code{x} should be mutated (\verb{$mutate(.data)}) before filtered (\verb{$filter(.data)}).
See the description section for more details about the processing steps of \link{Trans}.
}
}

\section{Methods}{

\itemize{
\item \code{filter(.data)}\cr
(\code{\link[data.table:data.table]{data.table::data.table()}}) -> \verb{[data.table::data.table()]}\cr
\strong{(By default, first of the preprocessing steps)}\cr
By default this method returns the input \code{.data}. This method can be overwrite
to give the user the flexibility to 'filter' the data prior to making prediction
by the given model. Filtering for eligible agents for this transition can be done in this step.
\item \code{mutate(.data)}\cr
(\code{\link[data.table:data.table]{data.table::data.table()}}) -> \verb{[data.table::data.table()]}\cr
\strong{(By default, second of the preprocessing steps)}\cr
By default this method returns the input \code{.data}. This method can be overwrite
to give the user the flexibility to 'mutate' the data prior to making prediction
by the given model. Adding derived variables and historical life course of the agents
can be done in this step.
\item \code{update_agents(attr)}\cr
(\code{character(1)})\cr
Update the attribute data of the agents that undergo the transition event.
\item \code{get_result(ids)}\cr
(\code{integer()}) -> \link[data.table:data.table]{data.table::data.table}\cr
Returns the simulation result in a \link[data.table:data.table]{data.table::data.table} format with two
columns \code{id} and \code{response}.
\item \code{get_nrow_result()}\cr
Returns the number of rows in the simulation result.
\item \code{get_decision_maker_ids(response_filter = NULL)}\cr
(\code{character()}) -> (\code{integer()})\cr
Returns ids of the agents that have their response equal to \code{response_filter}.
}
}

