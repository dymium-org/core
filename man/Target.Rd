% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Target.R
\name{Target}
\alias{Target}
\alias{Targets}
\title{Target}
\format{
\link[R6:R6Class]{R6::R6Class} object inheriting \link{Generic}.
}
\description{
\code{Target} is to be used within \code{TransitionClassification} or supply to event
functions. If the target is dynamic then its \code{get} will return its target
value at the current time or its closest time to the current time.
}
\section{Construction}{
\preformatted{Target$new(x, name)
}
\itemize{
\item \code{x} :: any object that passes \code{check_target()}\cr
A target object or \code{NULL}.
\item \code{name} :: \code{character(1)}\cr
Name/Alias of the Target object. This will be used as the \link{Target} name when
it gets added to a \link{World}.
}
}

\section{Active Field (read-only)}{

\itemize{
\item \code{data}:: a target object\cr
A target object.
\item \code{dynamic}:: \code{logical(1)}\cr
A logical flag which indicates whether the target object is dynamic or not.
}
}

\section{Public Methods}{

\itemize{
\item \code{get(time = .get_sim_time())}\cr
(\code{integer(1)}) -> a named \code{list()}\cr
Get an alignment target as a named list. Note that, all the elements in the list
will be scaled by multiplying with the value stored in getOption("dymium.simulation_scale")
and all the values in the output are rounded to their nearest integers.
}
}

\examples{

# static target
TrgtStatic <- Target$new(x = list(yes = 10))
TrgtStatic$data
TrgtStatic$dynamic
TrgtStatic$get()

# dynamic target
target_dynamic <- data.frame(time = 1:10, yes = 1:10)
TrgtDynamic <- Target$new(x = target_dynamic)
TrgtDynamic$data
TrgtDynamic$dynamic

# if the `time` argument in `get()` is not specified then it will rely on
# the time step from the simulation clock from `.get_sim_time()`.
TrgtDynamic$get()
TrgtDynamic$get(1)
TrgtDynamic$get(10)
}
