% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim.R
\name{sim}
\alias{sim}
\title{Compile then execute a microsimulation pipeline

This function compiles then executes a microsimulation pipeline.}
\usage{
sim(world, pipeline, n_iters, write.error.dump.folder)
}
\arguments{
\item{world}{(\code{World})\cr
A \link{World} object.}

\item{pipeline}{(\verb{function()})\cr
A functional sequence (\code{fseq}) object.}

\item{n_iters}{a number of iterations. (\code{integer(1)})\cr
Number of times the microsimulation pipeline should be repeated.}
}
\value{
\code{NULL}
}
\description{
Compile then execute a microsimulation pipeline

This function compiles then executes a microsimulation pipeline.
}
\examples{

library(data.table)

# create simple models
birth_model <- list(yes = 0.1, no = 0.9)
death_model <- list(yes = 0.1, no = 0.9)

# prepare population data
ind_data <-
  data.table::copy(toy_individuals) \%>\%
  .[, .give_birth := "no"]

# create a World object, a container for all entities and models for simulation
world <- World$new()
world$add(x = Individual$new(.data = ind_data, id_col = "pid"))

# create filters, this is a method for creating functions using `magrittr` and
# data.table's syntax
filter_eligible_females <-
  . \%>\%
  .[sex == "female" & age \%between\% c(18, 50)]

filter_alive <-
  . \%>\%
  .[age != -1]

microsimulation_pipeline <-
  . \%>\%
  # ageing
  mutate_entity(entity = "Individual",
                age := age + 1L,
                subset = age != -1L) \%>\%
  # simulate birth decision
  transition(entity = "Individual",
             model = birth_model,
             attr = ".give_birth",
             preprocessing_fn = . \%>\% filter_eligible_females \%>\% filter_alive) \%>\%
  # add newborns
  add_entity(entity = "Individual",
             newdata = toy_individuals[age == 0, ],
             target = .$entities$Individual$get_data()[.give_birth == "yes", .N]) \%>\%
  # reset the birth decision variable
  mutate_entity(entity = "Individual",
                .give_birth := "no",
                subset = age != -1L) \%>\%
  # simulate deaths
  transition(entity = "Individual",
             model = death_model,
             attr = "age",
             values = c(yes = -1L),
             preprocessing_fn = filter_alive) \%>\%
  # log the total number of alive individuals at the end of the iteration
  add_log(desc = "count:Individual",
          value = .$entities$Individual$get_data()[age != -1L, .N])

# complie simulation
sim(world = world, pipeline = microsimulation_pipeline, n_iters = 10)
}
