% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim.R
\name{sim}
\alias{sim}
\alias{sim_parallel}
\title{Compile and execute a microsimulation pipeline}
\usage{
sim(
  world,
  pipeline,
  n_iters = 1,
  write.error.dump.folder = get_active_scenario()$output_dir,
  write.error.dump.file = FALSE
)

sim_parallel(
  world,
  pipeline,
  n_iters = 1L,
  n_repeats = 1L,
  n_workers = 1L,
  DTthreads = data.table::getDTthreads(),
  .future_options,
  write.error.dump.file = FALSE,
  write.error.dump.folder = get_active_scenario()$output_dir
)
}
\arguments{
\item{world}{(\code{World})\cr
A \link{World} object.}

\item{pipeline}{(\verb{function()})\cr
A functional sequence (\code{fseq}) object.}

\item{n_iters}{a number of iterations. (\code{integer(1)})\cr
Number of times the microsimulation pipeline, \code{pipeline}, should be repeated
on the \code{world} object.}

\item{write.error.dump.folder}{(\code{character(1)})\cr
path: Saves the dump of the workspace in a specific folder instead of the
working directory}

\item{n_repeats}{(\code{integer(1)})\cr
Number of times the entire simulation should be repeated. This is not the same as
\code{n_iters}.}

\item{n_workers}{(\code{integer(1)})\cr
Number of parallel workers. This requires the \code{parallel} package to be installed.}

\item{DTthreads}{(\code{integer(1)}|\code{missing})\cr
Number of cores data.table is allowed to used in an R session. If missing,
it will use the default number of cores set by \link[data.table:data.table]{data.table::data.table}, which
is usually half of the available number of cores.}

\item{.options}{\code{\link[furrr:future_options]{furrr::future_options()}}\cr
By default this is set to \code{furrr::future_options(scheduling = FALSE)}.
See \code{\link[furrr:future_options]{furrr::future_options()}} for more details.}
}
\value{
\code{sim} doesn't return anything but mutates the given \link{World} object. While,
\code{sim_paralell()} returns \code{n_tasks} number of mutated \link{World} objects.
}
\description{
This function compiles and executes a microsimulation pipeline.

\code{sim} mutates the given \link{World} object. While, \code{sim_parallel} clones the
given \link{World} object and returns \code{n_repeats} of mutated \link{Worlds}.
}
\examples{

library(data.table)

# create simple models
birth_model <- list(yes = 0.1, no = 0.9)
death_model <- list(yes = 0.1, no = 0.9)

# prepare population data
ind_data <-
  data.table::copy(toy_individuals) \%>\%
  .[, .give_birth := "no"]

# create a World object, a container for all entities and models for simulation
world <- World$new()
world$add(x = Individual$new(.data = ind_data, id_col = "pid"))

# create filters, this is a method for creating functions using `magrittr` and
# data.table's syntax
filter_eligible_females <-
  . \%>\%
  .[sex == "female" & age \%between\% c(18, 50)]

filter_alive <-
  . \%>\%
  .[age != -1]

microsimulation_pipeline <-
  . \%>\%
  # ageing
  mutate_entity(entity = "Individual",
                age := age + 1L,
                subset = age != -1L) \%>\%
  # simulate birth decision
  transition(entity = "Individual",
             model = birth_model,
             attr = ".give_birth",
             preprocessing_fn = . \%>\% filter_eligible_females \%>\% filter_alive) \%>\%
  # add newborns
  add_entity(entity = "Individual",
             newdata = toy_individuals[age == 0, ],
             target = .$entities$Individual$get_data()[.give_birth == "yes", .N]) \%>\%
  # reset the birth decision variable
  mutate_entity(entity = "Individual",
                .give_birth := "no",
                subset = age != -1L) \%>\%
  # simulate deaths
  transition(entity = "Individual",
             model = death_model,
             attr = "age",
             values = c(yes = -1L),
             preprocessing_fn = filter_alive) \%>\%
  # log the total number of alive individuals at the end of the iteration
  add_log(desc = "count:Individual",
          value = .$entities$Individual$get_data()[age != -1L, .N])

# complie and execute a simulation pipeline
sim(world = world, pipeline = microsimulation_pipeline, n_iters = 10)
}
